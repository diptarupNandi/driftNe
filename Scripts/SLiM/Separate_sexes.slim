// Keywords: sexual

initialize() {
	defineConstant("L", 1e6); //Genome size
	defineConstant("N", 10000); //Population size
	defineConstant("S", 0.7); //Sex ratio
	initializeSLiMOptions(keepPedigrees = T, nucleotideBased=T); //pedigree imp for reproInds
	initializeAncestralNucleotides(randomNucleotides(L)); //all inds, same genome at gen 1
	initializeMutationTypeNuc("m1", 0.5, "f", 0.0); //neutral muts
	initializeGenomicElementType("g1", m1, 1.0, mmJukesCantor(0.4e-8));
	initializeGenomicElement(g1, 0, L-1);
	initializeRecombinationRate(1e-8);
}

//Measuring the number of segregating sites
function (lifso) Seg_sites(lifso<Subpopulation> n){
	return length(sim.mutationCounts(n));
}

//Function for defining sex-ratio (male/N)
function (logical) Sex_ratio(float n){
	x = asInteger(n*N);
	return c(rep(T,x),rep(F,N-x)); //female = F, male = T
}


// Logging different parameters
1 early() {
	sim.addSubpop("p1", N);
	p1.individuals.tagL0 = Sex_ratio(S);
	//Results in equal sex ratios
	log = community.createLogFile(
	"C:/APU/Honors/Data/Sexual_pops/10k/testLog0_7M.txt", sep = "\t", logInterval = 10);
	log.addCycle();
	log.addCustomColumn("Heterozygosity", "calcHeterozygosity(p1.genomes);");
	log.addCustomColumn("Watt_theta", "calcWattersonsTheta(p1.genomes);");	
	log.addCustomColumn("Seg_sites", "Seg_sites(p1);");
	log.addCustomColumn("ReproInds", "length(unique(p1.individuals.pedigreeParentIDs));");
}

modifyChild() {
	if (parent1.tagL0 == parent2.tagL0)
	return F;
	//Change this to mediate sex ratios (not fully sure how it works).
	child.tagL0 = (runif(1) <= S);
	// runif samples values between 0,1. Figure out from which distribution. If runif(1) <= 0.5 = F, child.tagL0 = Female, else, male.
	return T;
}


100000 late() { sim.simulationFinished(); }


	//sim.outputFull("C:/APU/Honors/SLiM_Output/Sexual_pops/0.5/N=0.1k/Burn_In.txt"); }
	
//Can use tagL0 instead of simulating sex chromosomes to simulate sexes. See 12.5 SLiM manual
