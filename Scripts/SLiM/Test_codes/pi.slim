initialize() {
	defineConstant("L", 1e6);
	defineConstant("N", 100);
	initializeSLiMOptions(keepPedigrees = T, nucleotideBased=T); //pedigree imp for reproInds
	initializeAncestralNucleotides(randomNucleotides(L)); //all inds, same genome at gen 1
	initializeMutationTypeNuc("m1", 0.5, "f", 0.0); //neutral muts
	initializeGenomicElementType("g1", m1, 1.0, mmJukesCantor(0.4e-8));
	initializeGenomicElement(g1, 0, L-1);
	initializeRecombinationRate(1e-8);
}

function (integer) PairNuc(object<Genome> genome1, object<Genome> genome2){
	gen1 = genome1.nucleotides(format = 'integer');
	gen2 = genome2.nucleotides(format = 'integer');
	return sum(gen1!=gen2);
}
	
1 early(){sim.addSubpop('p1', N);}

10000 late(){
	pi=c();
	inds = p1.individuals;
	for(i in 0:(length(inds)-2)){
		for(j in (i+1):(length(inds)-1)){
			combo1 = PairNuc(inds[i].genome1, inds[j].genome1);
			combo2 = PairNuc(inds[i].genome1, inds[j].genome2);
			combo3 = PairNuc(inds[i].genome2, inds[j].genome1);
			combo4 = PairNuc(inds[i].genome2, inds[j].genome2);
			pi = c(pi, combo1, combo2, combo3, combo4);
		}
	}
	catn("Pi: " + mean(pi));
	print(length(pi));
}